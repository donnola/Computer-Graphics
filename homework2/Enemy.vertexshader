#version 330 core
// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vPos_modelspace;
layout(location = 1) in vec4 q; // quaternion
layout(location = 2) in vec3 position; // Position of the center
layout(location = 3) in vec3 vertexColor;

// Output data ; will be interpolated for each fragment.
out vec3 fragmentColor;

// Values that stay constant for the whole mesh.

uniform mat4 MVP; // Model-View-Projection matrix, but without the Model

void main()
{

    vec3 vertex_rot = vPos_modelspace + 2.0 * cross(q.xyz, cross(q.xyz, vPos_modelspace) + q.w * vPos_modelspace);
	vec3 vertex_pos = position + vertex_rot;

	// Output position of the vertex
	gl_Position = MVP * vec4(vertex_pos, 1.0f);

	fragmentColor = vertexColor;
}

